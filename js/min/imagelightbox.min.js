"use strict";!function(T,I,C){var M=T("<div/>").attr("class","imagelightbox-loading").append(T("<div/>")),t=T("<button/>",{type:"button",class:"imagelightbox-arrow imagelightbox-arrow-left",html:"&lt;"}),i=T("<button/>",{type:"button",class:"imagelightbox-arrow imagelightbox-arrow-right",html:"&gt;"}),P=t.add(i),D=T("<div/>",{class:"imagelightbox-caption",html:"&nbsp;"}),X=T("<a/>",{class:"imagelightbox-close",html:"X"}),L=T("<div/>",{class:"imagelightbox-overlay"}),N=T("<a/>",{href:"#",class:"imagelightbox-navitem"}),j=T("<div/>",{class:"imagelightbox-nav"}),B=T("<div/>",{class:"imagelightbox-wrapper"}),a=function(){var t=C.body||C.documentElement;return""===(t=t.style).WebkitTransition?"-webkit-":""===t.MozTransition?"-moz-":""===t.OTransition?"-o-":""===t.transition&&""},K=!1!==a(),U=function(t,i,n){var e={},o=a();e[o+"transform"]="translateX("+i+")",e[o+"transition"]=o+"transform "+n+"s linear",t.css(e)},_="ontouchstart"in I,z=I.navigator.pointerEnabled||I.navigator.msPointerEnabled,H=function(t){if(_)return!0;if(!z||void 0===t||void 0===t.pointerType)return!1;if(void 0!==t.MSPOINTER_TYPE_MOUSE){if(t.MSPOINTER_TYPE_MOUSE!==t.pointerType)return!0}else if("mouse"!==t.pointerType)return!0;return!1};T.fn.imageLightbox=function(t){var a=T.extend({selector:"a[data-imagelightbox]",id:"imagelightbox",allowedTypes:"png|jpg|jpeg|gif",animationSpeed:250,activity:!1,arrows:!1,button:!1,caption:!1,enableKeyboard:!0,lockBody:!1,navigation:!1,overlay:!1,preloadNext:!0,quitOnEnd:!1,quitOnImgClick:!1,quitOnDocClick:!0,quitOnEscKey:!0},t),r=function(){a.activity&&n(),a.arrows&&P.css("display","block")},l=function(){var t=h.index(p)-1;if(t<0){if(!0===a.quitOnEnd)return O(),!1;t=h.length-1}p=h.eq(t),B.trigger("previous.ilb2"),k(1)},c=function(){var t=h.index(p)+1;if(t>=h.length){if(!0===a.quitOnEnd)return O(),!1;t=0}p=h.eq(t),B.trigger("next.ilb2"),k(-1)},i=function(){B.append(M)},n=function(){T(".imagelightbox-loading").remove()},e=function(){B.append(L)},o=function(){X.appendTo(B).on("click.ilb7",function(){return O(),!1})},s=function(){D.html("&nbsp;"),T(p).data("ilb2-caption")?D.html(T(p).data("ilb2-caption")):0<T(p).find("img").length&&D.html(T(p).find("img").attr("alt"))},u=function(){if(h.length){for(var t=0;t<h.length;t++)j.append(N.clone());var i=j.children("a");i.eq(h.index(p)).addClass("active"),B.on("previous.ilb2 next.ilb2",function(){i.removeClass("active").eq(h.index(p)).addClass("active")}),B.append(j),j.on("click.ilb7 touchend.ilb7",function(){return!1}).on("click.ilb7 touchend.ilb7","a",function(){var t=T(this);if(h.eq(t.index()).attr("href")!==T(".imagelightbox").attr("src")){var i=h.eq(t.index());i.length&&(y=h.index(p),p=i,k(t.index()<y?-1:1))}t.addClass("active").siblings().removeClass("active")})}},g=function(){B.append(P),P.on("click.ilb7 touchend.ilb7",function(t){return t.stopImmediatePropagation(),t.preventDefault(),T(this).hasClass("imagelightbox-arrow-left")?l():c(),!1})},f="",h=T([]),p=T(),d=T(),b=0,m=0,v=0,x=!1,y=0,w=function(){if(!d.length)return!0;var t=D.outerHeight(),i=.8*T(I).width(),n=(I.innerHeight?I.innerHeight:T(I).height())-t,e=.9*n,o=new Image;o.src=d.attr("src"),o.onload=function(){if(b=o.width,m=o.height,i<b||e<m){var t=i/e<b/m?b/i:m/e;b/=t,m/=t}d.css({width:b+"px",height:m+"px",top:(n-m)/2+"px",left:(T(I).width()-b)/2+"px"})}},k=function(o){if(x)return!1;if(d.length){var t={opacity:0};K?U(d,100*o-v+"px",a.animationSpeed/1e3):t.left=parseInt(d.css("left"))+100*o+"px",d.animate(t,a.animationSpeed,function(){E()}),v=0}x=!0,a.activity&&i(),a.caption&&s(),setTimeout(function(){var t=p.attr("href");d=T('<img id="'+a.id+'" />').attr("src",t).on("load.ilb7",function(){B.trigger("loaded.ilb2");var t={opacity:1};if(d.appendTo(B),w(),d.css("opacity",0),K)U(d,-100*o+"px",0),setTimeout(function(){U(d,"0px",a.animationSpeed/1e3)},50);else{var i=parseInt(d.css("left"));t.left=i+"px",d.css("left",i-100*o+"px")}if(d.animate(t,a.animationSpeed,function(){x=!1,r()}),a.preloadNext){var n=h.eq(h.index(p)+1);n.length||(n=h.eq(0)),T("<img />").attr("src",n.attr("href"))}}).on("error.ilb7",function(){r()});var i=0,n=0,e=0;d.on(z?"pointerup.ilb7 MSPointerUp.ilb7":"click.ilb7",function(t){return t.preventDefault(),a.quitOnImgClick?(O(),!1):!!H(t.originalEvent)||void((t.pageX||t.originalEvent.pageX)-t.target.offsetLeft<b/2?l():c())}).on("touchstart.ilb7 pointerdown.ilb7 MSPointerDown.ilb7",function(t){if(!H(t.originalEvent)||a.quitOnImgClick)return!0;K&&(e=parseInt(d.css("left"))),i=t.originalEvent.pageX||t.originalEvent.touches[0].pageX}).on("touchmove.ilb7 pointermove.ilb7 MSPointerMove.ilb7",function(t){if(!z&&"pointermove"===t.type||!H(t.originalEvent)||a.quitOnImgClick)return!0;t.preventDefault(),n=t.originalEvent.pageX||t.originalEvent.touches[0].pageX,v=i-n,K?U(d,-v+"px",0):d.css("left",e-v+"px")}).on("touchend.ilb7 touchcancel.ilb7 pointerup.ilb7 pointercancel.ilb7 MSPointerUp.ilb7 MSPointerCancel.ilb7",function(t){if(!H(t.originalEvent)||a.quitOnImgClick)return!0;50<Math.abs(v)?v<0?l():c():K?U(d,"0px",a.animationSpeed/1e3):d.animate({left:e+"px"},a.animationSpeed/2)})},a.animationSpeed+100)},E=function(){if(!d.length)return!1;d.remove(),d=T()},q=function(t){if(x)return!1;x=!1,p=t,function(){a.arrows&&g(this),a.navigation&&u(),a.overlay&&e(),a.button&&o(),a.caption&&B.append(D)}(),T("body").append(B),a.lockBody&&T("body").addClass("imagelightbox-scroll-lock"),B.trigger("start.ilb2"),k(0)},O=function(){if(B.trigger("quit.ilb2"),a.lockBody&&T("body").removeClass("imagelightbox-scroll-lock"),!d.length)return!1;d.animate({opacity:0},a.animationSpeed,function(){E(),x=!1,h=T([]),B.remove().find("*").remove()})},S=function(i){i.on("click.ilb7",{set:f},function(t){t.preventDefault(),f=T(t.currentTarget).data("imagelightbox"),i.filter(function(){return T(this).data("imagelightbox")===f}).filter(function(){return function(t){var i=a.allowedTypes;if(!/^(?!\|)[\w\|]+(?!\|)$/.test(i))return!1;var n=function(t){var i,n,e,o=C.createElement("a"),a={};for(o.href=t,i=o.search.replace(/^\?/,"").split("&"),e=0;e<i.length;e++)n=i[e].split("="),a[n[0]]=n[1];return{protocol:o.protocol,host:o.host,hostname:o.hostname,port:o.port,pathname:o.pathname,search:o.search,searchObject:a,hash:o.hash}}(t.attr("href")).pathname;return new RegExp(i,"i").test(n)}(T(this))}).each(function(){h=h.add(T(this))}),h.length<1?O():q(T(this))})};return T(I).on("resize.ilb7",w),T(C).ready(function(){a.quitOnDocClick&&T(C).on(_?"touchend.ilb7":"click.ilb7",function(t){d.length&&!T(t.target).is(d)&&(t.preventDefault(),O())}),a.lockBody&&T(C).on("keydown.ilb7",function(t){return!d.length||(-1<[9,32,38,40].indexOf(t.which)?(t.preventDefault(),!1):void 0)}),a.enableKeyboard&&T(C).on("keyup.ilb7",function(t){if(!d.length)return!0;t.preventDefault(),-1<[27].indexOf(t.which)&&a.quitOnEscKey&&O(),-1<[37].indexOf(t.which)?l():-1<[39].indexOf(t.which)&&c()})}),T(C).off("click",a.selector),S(T(this)),this.addToImageLightbox=function(t){S(t)},this.loadPreviousImage=function(){l()},this.loadNextImage=function(){c()},this.quitImageLightbox=function(){return O(),this},this.startImageLightbox=function(){T(this).trigger("click.ilb7")},this}}(jQuery,window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
